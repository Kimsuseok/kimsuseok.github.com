<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-09-14T15:25:22+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">내 맘대로 블로그</title><subtitle>안드로이드 개발 및 기타</subtitle><author><name>KIMSS</name><email>kssappmail@naver.com</email></author><entry><title type="html">Title of Your Post</title><link href="http://localhost:4000/%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C/" rel="alternate" type="text/html" title="Title of Your Post" /><published>2020-08-19T00:00:00+09:00</published><updated>2020-08-19T00:00:00+09:00</updated><id>http://localhost:4000/%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C</id><content type="html" xml:base="http://localhost:4000/%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C/">&lt;p&gt;테스트&lt;/p&gt;</content><author><name>KIMSS</name><email>kssappmail@naver.com</email></author><summary type="html">테스트</summary></entry><entry><title type="html">안드로이드에 대해서</title><link href="http://localhost:4000/%EC%B9%B4%ED%85%8C%EA%B3%A0%EB%A6%AC1/%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C2/" rel="alternate" type="text/html" title="안드로이드에 대해서" /><published>2020-08-19T00:00:00+09:00</published><updated>2020-08-19T00:00:00+09:00</updated><id>http://localhost:4000/%EC%B9%B4%ED%85%8C%EA%B3%A0%EB%A6%AC1/%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C2</id><content type="html" xml:base="http://localhost:4000/%EC%B9%B4%ED%85%8C%EA%B3%A0%EB%A6%AC1/%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C2/">&lt;h2 id=&quot;안드로이드에-대해서&quot;&gt;안드로이드에 대해서&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;프레임워크와 라이브러리 차이를 설명할 수 있다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new Activity()&lt;/code&gt; 코드가 왜 없는지에 대해 설명할 수 있다.&lt;/li&gt;
  &lt;li&gt;Lifecycle을 누가 호출하는지에 대해서 설명할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;1-안드로이드란&quot;&gt;1. 안드로이드란&lt;/h3&gt;

&lt;h4 id=&quot;1-os&quot;&gt;1. OS&lt;/h4&gt;
&lt;p&gt;하드웨어와 소프트웨어를 제어하며 사용자가 컴퓨터를 쓸 수 있도록 인터페이스를 제공하는 시스템(소프트웨어).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;안드로이드는 OS 이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;2-platform&quot;&gt;2. Platform&lt;/h4&gt;
&lt;p&gt;소프트웨어가 실행되는 환경. 좀 더 넓은 의미로 보자면 일관된 개발/실행 환경을 제공하는 모든 하드웨어나 소프트웨어. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Platform은 OS보다 좀 더 넓은 개념으로 OS 역시 Platform 이다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;일관된 개발/실행 환경을 제공한다는 의미에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Java&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.NET 프레임워크&lt;/code&gt; 등 도 모두 Platform 이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;안드로이드는 OS 이자 Platform 이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;3-library&quot;&gt;3. Library&lt;/h4&gt;
&lt;p&gt;자주 사용되는 기능을 묶어 클래스나 함수, 메서드로 만들게 되는데 이들의 집합을 Library 라 한다. &lt;br /&gt;
 단순히 재활용 가능한 코드의 집합으로 예를 들어 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C 표준 library&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Java library&lt;/code&gt;가 있다.&lt;/p&gt;

&lt;h4 id=&quot;4-framework&quot;&gt;4. Framework&lt;/h4&gt;
&lt;p&gt;프레임워크는 소프트웨어 개발에 있어 하나의 뼈대 역할을 하는데 소프트웨어의 특정 문제를 해결하기 위해서 상호 협력하는 클래스와 인터페이스의 집합이다.&lt;/p&gt;

&lt;p&gt;프레임워크는 라이브러리보다 더 넓은 개념으로 보통 프레임워크는 라이브러리를 제공한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;안드로이드는 앱 개발을 위해 Application Framework를 제공한다. 여기에 여러 library가 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;5-library와-framework의-차이&quot;&gt;5. Library와 Framework의 차이&lt;/h4&gt;

&lt;p&gt;주요한 차이점은 &lt;strong&gt;소프트웨어 제어 흐름에 대한 주도성이 누구에게/어디에 있는가&lt;/strong&gt; 이다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;라이브러리는 개발자가 호출하여 사용한다. &lt;br /&gt;
 개발자 필요에 따라 사용하므로 개발의 흐름을 개발자가 가지고 있다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;프레임워크는 &lt;strong&gt;제어의 역전&lt;/strong&gt;이 발생한다. &lt;br /&gt;
 개발자가 흐름을 주도하는것이 아니라 프레임워크에 의해서 흐름이 주도되며, 개발자는 프레임워크의 요구에 맞춰 코드를 개발한다.&lt;/p&gt;

&lt;h4 id=&quot;6-안드로이드에서-framework의-특징을-알-수-있는-예&quot;&gt;6. 안드로이드에서 Framework의 특징을 알 수 있는 예&lt;/h4&gt;
&lt;p&gt;안드로이드 주요 컴포넌트 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Activity&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Service&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Broadcast Receiver&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Content Provider&lt;/code&gt; 를 앱에서 구현할때 이 클래스들을 상속받은 다음 Lifecycle 메서드를 override하여 필요한 코드를 추가한다.&lt;/p&gt;

&lt;p&gt;Activity를 구현하는 예를 본다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Activity를 상속받는 클래스를 생성함.
class SampleActivity : AppCompatActivity() {
	
	// Activity Lifecycle 메서드인 onCreate()를 override하여 필요한 코드를 개발함.
	override fun onCreate(savedInstanceState: Bundle?) {
		super.onCreate(savedInstanceState)
		setContentView(R.layout.activity_sample)
		initView()
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;객체 지향 프로그래밍에서 모든 것은 객체로 존재해야 한다. &lt;br /&gt;
그런데 안드로이드에서 Activity를 생성할때 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new SampleActivity()&lt;/code&gt;를 호출하지 않는다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;또한, Lifecycle 메서드인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onCreate(savedInstanceState: Bundle?)&lt;/code&gt; 는 개발자가 호출한 적이 없는데 알아서 호출된다.&lt;/p&gt;

&lt;p&gt;프레임워크의 특징은 뼈대 역할을 하고 제어의 역전이 발생한다고 했다. &lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Activity 라는걸 만들면 하나의 화면이 만들어진다는 점. (Activity가 화면이 되는 뼈대를 제공함)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onCreate()&lt;/code&gt;는 개발자가 호출한적이 없는데 알아서 호출이 되고, 개발자에게는 적당한 lifecycle 메서드 아래에 적당한 코드가 기입되는것이 강요된다는 점&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이러한 것이 안드로이드가 프레임워크인 예라고 할 수 있다.&lt;/p&gt;

&lt;p&gt;–&lt;/p&gt;

&lt;h3 id=&quot;2-os--framework-로써-안드로이드&quot;&gt;2. OS / Framework 로써 안드로이드&lt;/h3&gt;

&lt;h4 id=&quot;1-kernel&quot;&gt;1. Kernel&lt;/h4&gt;
&lt;p&gt;OS의 핵심. &lt;br /&gt;
 메모리 관리, 프로세스 관리, 쓰레드 관리, 하드웨어 드라이버 관리 등을 한다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;안드로이드는 오픈소스 OS인 리눅스의 커널을 Base로 모바일 환경에 맞게 커스터마이징 하여 사용한다.&lt;/p&gt;

&lt;h4 id=&quot;2-library&quot;&gt;2. Library&lt;/h4&gt;
&lt;p&gt;여기서 Library는 일반적으로 앱 개발할때 사용하는 android library가 아니라 system library를 말한다. 단말의 속도를 결정하는 중요한 요소라 자바가 아닌 C로 개발되어 있다.&lt;/p&gt;

&lt;h4 id=&quot;3-runtime&quot;&gt;3. Runtime&lt;/h4&gt;
&lt;p&gt;안드로이드 앱이 구동되는 실행 환경이다. &lt;br /&gt;
 안드로이드에서 Dalvik, ART가 런타임에 해당한다.&lt;/p&gt;

&lt;p&gt;일반적인 컴파일 언어는 CPU의 아키텍쳐와 플랫폼의 환경에 맞추어 기계어로 컴파일된다. 간단히 말하자면, 사람이 작성한 프로그램을 CPU가 알아들을 수 있는 언어로 바로 번역하여 저장하는 것이다. 이 CPU간의 서로 다른 “언어”가 “아키텍쳐”에 해당한다고 보면 된다.&lt;/p&gt;

&lt;p&gt;그러나, 자바의 경우는 기본적으로 한 가지 CPU의 아키텍쳐나 환경에 맞추는 것이 아닌 바이트코드라는 것으로 컴파일 되며, 이를 실행하기 위해서는 자바 가상 머신이 필요하다. 이렇게 하는 이유는 자바는 바이트코드 하나만으로 여러 가지 아키텍쳐나 플랫폼에서 작동할 수 있도록 하는 것이 목표이기 때문이다. 아키텍쳐와 플랫폼에 맞는 가상머신만 있다면 하나의 실행 파일만 가지고도 각종 장치에서 쓸 수 있는 것이다.&lt;/p&gt;

&lt;p&gt;안드로이드도 Java 언어를 사용하기 때문에 VM이 필수적이다. 이에 자바 가상머신(JVM)을 사용할 수 있지만, JVM은 라이센스 문제가 있어서 구글에서는 안드로이드 개발 시 Dalvik VM을 따로 개발해서 넣었다.&lt;/p&gt;

&lt;p&gt;이후 Dalvik 대신 ART를 개발하였고, 최신 버전의 안드로이드 Runtime은 ART이다.&lt;/p&gt;

&lt;h4 id=&quot;4-application-framework&quot;&gt;4. Application Framework&lt;/h4&gt;
&lt;p&gt;앱 개발의 기본이 되는것이 어플리케이션 프레임워크로 개발시 어플리케이션 프레임워크를 사용한다. 앱은 커널이나 시스템 라이브러리를 직접호출할 수 없고, 프레임워크의 api를 호출하여 이들을 사용할 수 있다.&lt;/p&gt;

&lt;h4 id=&quot;5-application&quot;&gt;5. Application&lt;/h4&gt;
&lt;p&gt;안드로이드 환경에서 동작하는 앱. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;참고로 안드로이드 폰을 구동하면 부팅 후 런처가 뜨는데 이 런처 역시 Application에 속한다. 마치 OS의 특징인것처럼 보여 다른 계층에 존재할것 같지만 런처는 다른 앱을 구동시키는 앱일 뿐이다.&lt;/p&gt;

&lt;h3 id=&quot;3-activitymanagerservice&quot;&gt;3. ActivityManagerService&lt;/h3&gt;
&lt;p&gt;startActivity()를 호출하면 누가 Activity를 생성하게 되는가? 이들을 관리하는것은 누구인가? 최근 앱 목록을 보면 어떻게 이 목록들이 나타날 수 있을까?&lt;/p&gt;

&lt;p&gt;이들을 가능하게 하는게 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ActivityManagerService&lt;/code&gt; 이다. &lt;br /&gt;
 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ActivityManagerService&lt;/code&gt;는 코어 플랫폼 서비스(시스템 서비스)로써, Application Framework에 속한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ActivityManagerService&lt;/code&gt;의 주 역할이 안드로이드 4대 Component인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Activity&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Service&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BroadcastReceiver&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ContentProvider&lt;/code&gt;를 생성하고 이들의 생명주기를 관리하는 것이다.&lt;/p&gt;

&lt;p&gt;즉, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;startActivity()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;startService()&lt;/code&gt; 를 했을때 액티비티와 서비스를 생성하는 주체가 바로 ActivityManagerService 이다. &lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;System Service는 SystemServer에 의해 단말 부팅 시 실행된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;-activitythread&quot;&gt;* ActivityThread&lt;/h4&gt;
&lt;p&gt;ActivityManagerService에 의해서 실제로 Activity에 대해 관리가 이뤄지는 곳이 ActivityThread 이다.&lt;/p&gt;

&lt;p&gt;ActivityThread는 모든 안드로이드 애플리케이션의 &lt;strong&gt;메인 스레드&lt;/strong&gt;로서 액티비티 및 서비스의 생성 및 스케쥴링을 담당한다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;앱에서 Activity나 Service 생성을 요청하면 SystemService인 ActivityManagerService에게 요청이 전달된다. ActivityManagerService는 실행하고자 하는 Activity나 Service의 Process가 존재하는지 보고 존재하지 않으면 zygote process 를 통한 프로세스 생성 및 ActivityThread 생성을 요청한다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/app/ActivityThread.java&quot;&gt;ActivityThread&lt;/a&gt; 코드 참고.&lt;/p&gt;

&lt;p&gt;–&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://webclub.tistory.com/458&quot;&gt;https://webclub.tistory.com/458&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://blog.naver.com/hakssung/70118757588&quot;&gt;https://blog.naver.com/hakssung/70118757588&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>KIMSS</name><email>kssappmail@naver.com</email></author><category term="태그1" /><summary type="html">안드로이드에 대해서 프레임워크와 라이브러리 차이를 설명할 수 있다. new Activity() 코드가 왜 없는지에 대해 설명할 수 있다. Lifecycle을 누가 호출하는지에 대해서 설명할 수 있다.</summary></entry><entry><title type="html">안드로이드에 대해서</title><link href="http://localhost:4000/%EC%B9%B4%ED%85%8C%EA%B3%A0%EB%A6%AC1/%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C33/" rel="alternate" type="text/html" title="안드로이드에 대해서" /><published>2020-08-19T00:00:00+09:00</published><updated>2020-08-19T00:00:00+09:00</updated><id>http://localhost:4000/%EC%B9%B4%ED%85%8C%EA%B3%A0%EB%A6%AC1/%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C33</id><content type="html" xml:base="http://localhost:4000/%EC%B9%B4%ED%85%8C%EA%B3%A0%EB%A6%AC1/%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C33/">&lt;p&gt;잘 반영되나??&lt;/p&gt;

&lt;h2 id=&quot;안드로이드에-대해서&quot;&gt;안드로이드에 대해서&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;프레임워크와 라이브러리 차이를 설명할 수 있다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new Activity()&lt;/code&gt; 코드가 왜 없는지에 대해 설명할 수 있다.&lt;/li&gt;
  &lt;li&gt;Lifecycle을 누가 호출하는지에 대해서 설명할 수 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;1-안드로이드란&quot;&gt;1. 안드로이드란&lt;/h3&gt;

&lt;h4 id=&quot;1-os&quot;&gt;1. OS&lt;/h4&gt;
&lt;p&gt;하드웨어와 소프트웨어를 제어하며 사용자가 컴퓨터를 쓸 수 있도록 인터페이스를 제공하는 시스템(소프트웨어).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;안드로이드는 OS 이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;2-platform&quot;&gt;2. Platform&lt;/h4&gt;
&lt;p&gt;소프트웨어가 실행되는 환경. 좀 더 넓은 의미로 보자면 일관된 개발/실행 환경을 제공하는 모든 하드웨어나 소프트웨어. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Platform은 OS보다 좀 더 넓은 개념으로 OS 역시 Platform 이다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;일관된 개발/실행 환경을 제공한다는 의미에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Java&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.NET 프레임워크&lt;/code&gt; 등 도 모두 Platform 이다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;안드로이드는 OS 이자 Platform 이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;3-library&quot;&gt;3. Library&lt;/h4&gt;
&lt;p&gt;자주 사용되는 기능을 묶어 클래스나 함수, 메서드로 만들게 되는데 이들의 집합을 Library 라 한다. &lt;br /&gt;
 단순히 재활용 가능한 코드의 집합으로 예를 들어 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C 표준 library&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Java library&lt;/code&gt;가 있다.&lt;/p&gt;

&lt;h4 id=&quot;4-framework&quot;&gt;4. Framework&lt;/h4&gt;
&lt;p&gt;프레임워크는 소프트웨어 개발에 있어 하나의 뼈대 역할을 하는데 소프트웨어의 특정 문제를 해결하기 위해서 상호 협력하는 클래스와 인터페이스의 집합이다.&lt;/p&gt;

&lt;p&gt;프레임워크는 라이브러리보다 더 넓은 개념으로 보통 프레임워크는 라이브러리를 제공한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;안드로이드는 앱 개발을 위해 Application Framework를 제공한다. 여기에 여러 library가 있다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;5-library와-framework의-차이&quot;&gt;5. Library와 Framework의 차이&lt;/h4&gt;

&lt;p&gt;주요한 차이점은 &lt;strong&gt;소프트웨어 제어 흐름에 대한 주도성이 누구에게/어디에 있는가&lt;/strong&gt; 이다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;라이브러리는 개발자가 호출하여 사용한다. &lt;br /&gt;
 개발자 필요에 따라 사용하므로 개발의 흐름을 개발자가 가지고 있다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;프레임워크는 &lt;strong&gt;제어의 역전&lt;/strong&gt;이 발생한다. &lt;br /&gt;
 개발자가 흐름을 주도하는것이 아니라 프레임워크에 의해서 흐름이 주도되며, 개발자는 프레임워크의 요구에 맞춰 코드를 개발한다.&lt;/p&gt;

&lt;h4 id=&quot;6-안드로이드에서-framework의-특징을-알-수-있는-예&quot;&gt;6. 안드로이드에서 Framework의 특징을 알 수 있는 예&lt;/h4&gt;
&lt;p&gt;안드로이드 주요 컴포넌트 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Activity&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Service&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Broadcast Receiver&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Content Provider&lt;/code&gt; 를 앱에서 구현할때 이 클래스들을 상속받은 다음 Lifecycle 메서드를 override하여 필요한 코드를 추가한다.&lt;/p&gt;

&lt;p&gt;Activity를 구현하는 예를 본다.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Activity를 상속받는 클래스를 생성함.
class SampleActivity : AppCompatActivity() {
	
	// Activity Lifecycle 메서드인 onCreate()를 override하여 필요한 코드를 개발함.
	override fun onCreate(savedInstanceState: Bundle?) {
		super.onCreate(savedInstanceState)
		setContentView(R.layout.activity_sample)
		initView()
	}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;객체 지향 프로그래밍에서 모든 것은 객체로 존재해야 한다. &lt;br /&gt;
그런데 안드로이드에서 Activity를 생성할때 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new SampleActivity()&lt;/code&gt;를 호출하지 않는다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;또한, Lifecycle 메서드인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onCreate(savedInstanceState: Bundle?)&lt;/code&gt; 는 개발자가 호출한 적이 없는데 알아서 호출된다.&lt;/p&gt;

&lt;p&gt;프레임워크의 특징은 뼈대 역할을 하고 제어의 역전이 발생한다고 했다. &lt;br /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Activity 라는걸 만들면 하나의 화면이 만들어진다는 점. (Activity가 화면이 되는 뼈대를 제공함)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onCreate()&lt;/code&gt;는 개발자가 호출한적이 없는데 알아서 호출이 되고, 개발자에게는 적당한 lifecycle 메서드 아래에 적당한 코드가 기입되는것이 강요된다는 점&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이러한 것이 안드로이드가 프레임워크인 예라고 할 수 있다.&lt;/p&gt;

&lt;p&gt;–&lt;/p&gt;

&lt;h3 id=&quot;2-os--framework-로써-안드로이드&quot;&gt;2. OS / Framework 로써 안드로이드&lt;/h3&gt;

&lt;h4 id=&quot;1-kernel&quot;&gt;1. Kernel&lt;/h4&gt;
&lt;p&gt;OS의 핵심. &lt;br /&gt;
 메모리 관리, 프로세스 관리, 쓰레드 관리, 하드웨어 드라이버 관리 등을 한다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;안드로이드는 오픈소스 OS인 리눅스의 커널을 Base로 모바일 환경에 맞게 커스터마이징 하여 사용한다.&lt;/p&gt;

&lt;h4 id=&quot;2-library&quot;&gt;2. Library&lt;/h4&gt;
&lt;p&gt;여기서 Library는 일반적으로 앱 개발할때 사용하는 android library가 아니라 system library를 말한다. 단말의 속도를 결정하는 중요한 요소라 자바가 아닌 C로 개발되어 있다.&lt;/p&gt;

&lt;h4 id=&quot;3-runtime&quot;&gt;3. Runtime&lt;/h4&gt;
&lt;p&gt;안드로이드 앱이 구동되는 실행 환경이다. &lt;br /&gt;
 안드로이드에서 Dalvik, ART가 런타임에 해당한다.&lt;/p&gt;

&lt;p&gt;일반적인 컴파일 언어는 CPU의 아키텍쳐와 플랫폼의 환경에 맞추어 기계어로 컴파일된다. 간단히 말하자면, 사람이 작성한 프로그램을 CPU가 알아들을 수 있는 언어로 바로 번역하여 저장하는 것이다. 이 CPU간의 서로 다른 “언어”가 “아키텍쳐”에 해당한다고 보면 된다.&lt;/p&gt;

&lt;p&gt;그러나, 자바의 경우는 기본적으로 한 가지 CPU의 아키텍쳐나 환경에 맞추는 것이 아닌 바이트코드라는 것으로 컴파일 되며, 이를 실행하기 위해서는 자바 가상 머신이 필요하다. 이렇게 하는 이유는 자바는 바이트코드 하나만으로 여러 가지 아키텍쳐나 플랫폼에서 작동할 수 있도록 하는 것이 목표이기 때문이다. 아키텍쳐와 플랫폼에 맞는 가상머신만 있다면 하나의 실행 파일만 가지고도 각종 장치에서 쓸 수 있는 것이다.&lt;/p&gt;

&lt;p&gt;안드로이드도 Java 언어를 사용하기 때문에 VM이 필수적이다. 이에 자바 가상머신(JVM)을 사용할 수 있지만, JVM은 라이센스 문제가 있어서 구글에서는 안드로이드 개발 시 Dalvik VM을 따로 개발해서 넣었다.&lt;/p&gt;

&lt;p&gt;이후 Dalvik 대신 ART를 개발하였고, 최신 버전의 안드로이드 Runtime은 ART이다.&lt;/p&gt;

&lt;h4 id=&quot;4-application-framework&quot;&gt;4. Application Framework&lt;/h4&gt;
&lt;p&gt;앱 개발의 기본이 되는것이 어플리케이션 프레임워크로 개발시 어플리케이션 프레임워크를 사용한다. 앱은 커널이나 시스템 라이브러리를 직접호출할 수 없고, 프레임워크의 api를 호출하여 이들을 사용할 수 있다.&lt;/p&gt;

&lt;h4 id=&quot;5-application&quot;&gt;5. Application&lt;/h4&gt;
&lt;p&gt;안드로이드 환경에서 동작하는 앱. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;참고로 안드로이드 폰을 구동하면 부팅 후 런처가 뜨는데 이 런처 역시 Application에 속한다. 마치 OS의 특징인것처럼 보여 다른 계층에 존재할것 같지만 런처는 다른 앱을 구동시키는 앱일 뿐이다.&lt;/p&gt;

&lt;h3 id=&quot;3-activitymanagerservice&quot;&gt;3. ActivityManagerService&lt;/h3&gt;
&lt;p&gt;startActivity()를 호출하면 누가 Activity를 생성하게 되는가? 이들을 관리하는것은 누구인가? 최근 앱 목록을 보면 어떻게 이 목록들이 나타날 수 있을까?&lt;/p&gt;

&lt;p&gt;이들을 가능하게 하는게 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ActivityManagerService&lt;/code&gt; 이다. &lt;br /&gt;
 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ActivityManagerService&lt;/code&gt;는 코어 플랫폼 서비스(시스템 서비스)로써, Application Framework에 속한다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ActivityManagerService&lt;/code&gt;의 주 역할이 안드로이드 4대 Component인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Activity&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Service&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BroadcastReceiver&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ContentProvider&lt;/code&gt;를 생성하고 이들의 생명주기를 관리하는 것이다.&lt;/p&gt;

&lt;p&gt;즉, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;startActivity()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;startService()&lt;/code&gt; 를 했을때 액티비티와 서비스를 생성하는 주체가 바로 ActivityManagerService 이다. &lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;System Service는 SystemServer에 의해 단말 부팅 시 실행된다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;-activitythread&quot;&gt;* ActivityThread&lt;/h4&gt;
&lt;p&gt;ActivityManagerService에 의해서 실제로 Activity에 대해 관리가 이뤄지는 곳이 ActivityThread 이다.&lt;/p&gt;

&lt;p&gt;ActivityThread는 모든 안드로이드 애플리케이션의 &lt;strong&gt;메인 스레드&lt;/strong&gt;로서 액티비티 및 서비스의 생성 및 스케쥴링을 담당한다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;앱에서 Activity나 Service 생성을 요청하면 SystemService인 ActivityManagerService에게 요청이 전달된다. ActivityManagerService는 실행하고자 하는 Activity나 Service의 Process가 존재하는지 보고 존재하지 않으면 zygote process 를 통한 프로세스 생성 및 ActivityThread 생성을 요청한다.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/app/ActivityThread.java&quot;&gt;ActivityThread&lt;/a&gt; 코드 참고.&lt;/p&gt;

&lt;p&gt;–&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://webclub.tistory.com/458&quot;&gt;https://webclub.tistory.com/458&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://blog.naver.com/hakssung/70118757588&quot;&gt;https://blog.naver.com/hakssung/70118757588&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>KIMSS</name><email>kssappmail@naver.com</email></author><category term="태그1" /><summary type="html">잘 반영되나??</summary></entry></feed>